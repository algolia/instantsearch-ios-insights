# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
	lane :test do
		scan(
			scheme: "Insights-iOS",
			configuration: "Release",
			clean: true,
 			xcargs: prepare_api_keys
		)
	end
end

platform :mac do
	lane :test do
		scan(
			scheme: "Insights-macOS",
			configuration: "Release",
			clean: true,
			xcargs: prepare_api_keys
		)
	end
end

platform :tv do
	lane :test do
		scan(
			scheme: "Insights-tvOS",
			configuration: "Release",
			clean: true,
			xcargs: prepare_api_keys
		)
	end
end

desc "Available options: type:major|minor|patch branch:master"
lane :deploy do |options|

	branch = options[:branch] || "master"
	prepare_git(branch)
	pod_lib_lint(verbose: true)
	increment_version_number(
  		bump_type: options[:type]
	)
	new_build_number = version_bump_podspec(
		bump_type: options[:type],
		path: "InstantSearchInsights.podspec"
	)

	branchName = "version-#{new_build_number}"
	sh("git checkout -b #{branchName}")


	#puts changelog_from_git_commits
	git_commit(
		path: ["InstantSearchInsights.podspec", "Insights/Info.plist"], 
		message: "Version #{new_build_number}"
	)
	add_git_tag(
		build_number: new_build_number,
		tag: new_build_number
	)
	push_to_git_remote(remote: "origin")

	create_pull_request(
		# api_token: "secret",      # optional, defaults to ENV["GITHUB_API_TOKEN"]
		repo: "algolia/instantsearch-ios-insights",
		title: "Deploying new #{options[:type]} version #{new_build_number}",
		head: "#{branchName}",       # optional, defaults to current branch name
		base: "master", # optional, defaults to "master"
		body: "Please check the files before merging in case I've overidden something accidentally.",       # optional
		# api_url: "http://yourdomain/api/v3" # optional, for GitHub Enterprise, defaults to "https://api.github.com"
	)


	pod_push(
		path: "InstantSearchInsights.podspec"
	)
end

desc "Upgrade Swift Version in .swift-version"
# Force cocoapods to compile with 'swift-version'
lane :upgrade_swift do |options|
    version = options[:version]
    sh("echo #{version} > ../.swift-version")
    puts "\e[31m\e[5mDon't forget to update the swift version in the dependecies: .podspecs & cartfile'\e[0m"
end

def prepare_git(branch)
	ensure_git_status_clean

	# ensure_git_branch(branch:branch)
	masterHash = sh("git rev-parse origin/#{branch}")
	headHash = sh("git rev-parse HEAD")
	
	if masterHash != headHash 
		raise "Error: Master and Head Hashes do not match, meaning that we are probably not on Master and therefore can't deploy"
	end

	# checkout master to be able to push tag there.
	sh("git checkout #{branch}")
	
	# We already pull in bitrise before doing anything, so no need for this step anymore.
	# git_pull
end

def prepare_api_keys()
        xcargs = []
        api_key = ENV["ALGOLIA_API_KEY"]
        if api_key
                xcargs << %Q[ALGOLIA_API_KEY="#{api_key}"]
        end

        api_id = ENV["ALGOLIA_APPLICATION_ID"]
        if api_id
                xcargs << %Q[ALGOLIA_APPLICATION_ID="#{api_id}"]
        end

        index_name = ENV["ALGOLIA_INDEX_NAME"]
        if index_name
                xcargs << %Q[ALGOLIA_INDEX_NAME="#{index_name}"]
        end

        bitrise_build_number = ENV["BITRISE_BUILD_NUMBER"]
        if bitrise_build_number
                xcargs << %Q[BITRISE_BUILD_NUMBER="#{bitrise_build_number}"]
        end

        return xcargs.join(" ")
end

